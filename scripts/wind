#!/usr/bin/env python

# modules
# ROS stuff
import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import Float32
from subprocess import check_output
from pylab import rand, pi

class Turbine:
    def __init__(self):
        self.angle = 0
        self.idx = 0

class Listener:
    def __init__(self, w=0):
        self.w = w
        self.sub = rospy.Subscriber('wind', Float32, self.callback)
    
    def callback(self,msg):
        self.w = msg.data
    
if __name__ == "__main__":
    
    rospy.init_node('wind')  
    
    # depends on the number of turbines
    turbines = []
    
    # joint message
    joint_msg = JointState()
    joint_msg.name = ['turbine']
    joint_msg.position = [0]

    # listener for velocity commands
    listener = Listener(rospy.get_param('~w'))

    T = 0.1
    rate = rospy.Rate(1/T)
    search_turbines = True
    
    while not rospy.is_shutdown():
                
        if search_turbines:
            topics = check_output([ 'rostopic', 'list']).splitlines()
            for topic in topics:
                if 'turbine' in topic and 'joint_states' in topic:
                    idx = int(topic.replace('/turbine', '').replace('/joint_states', ''))
                    if idx not in [turb.idx for turb in turbines]:
                        turbines.append(Turbine())
                        turbines[-1].idx = idx
                        turbines[-1].pub = rospy.Publisher('/turbine%i/joint_states' % idx, JointState, queue_size=10)
                        turbines[-1].angle = 2*pi/3*rand()
                        search_turbines = False
            if search_turbines:
                print('Not found yet')
            rospy.sleep(3)
            
        else:
            
            w = listener.w
            
            for turbine in turbines:
                turbine.angle += w*T
                turbine.angle = (turbine.angle + pi) % (2*pi) - pi
                joint_msg.position[0] = turbine.angle
                turbine.pub.publish(joint_msg)
        
        rate.sleep()
    